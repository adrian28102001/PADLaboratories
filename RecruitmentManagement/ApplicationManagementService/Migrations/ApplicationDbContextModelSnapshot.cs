// <auto-generated />
using System;
using ApplicationManagementService.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ApplicationManagementService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationManagementService.Entities.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppliedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CVPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CandidateId")
                        .HasColumnType("integer");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("InterviewDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("JobOfferId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppliedDate = new DateTime(2023, 8, 31, 18, 55, 57, 343, DateTimeKind.Local).AddTicks(7834),
                            CVPath = "/path/to/cv1.pdf",
                            CandidateId = 1,
                            Feedback = "Great resume! Looking forward to the interview.",
                            JobOfferId = 1,
                            LastUpdated = new DateTime(2023, 9, 1, 18, 55, 57, 343, DateTimeKind.Local).AddTicks(7865),
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            AppliedDate = new DateTime(2023, 9, 5, 18, 55, 57, 343, DateTimeKind.Local).AddTicks(7870),
                            CVPath = "/path/to/cv2.pdf",
                            CandidateId = 2,
                            Feedback = "Impressive background!",
                            JobOfferId = 2,
                            LastUpdated = new DateTime(2023, 9, 6, 18, 55, 57, 343, DateTimeKind.Local).AddTicks(7871),
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            AppliedDate = new DateTime(2023, 9, 8, 18, 55, 57, 343, DateTimeKind.Local).AddTicks(7874),
                            CVPath = "/path/to/cv3.pdf",
                            CandidateId = 3,
                            Feedback = "Schedule for an interview next week.",
                            InterviewDate = new DateTime(2023, 9, 12, 18, 55, 57, 343, DateTimeKind.Local).AddTicks(7876),
                            JobOfferId = 3,
                            LastUpdated = new DateTime(2023, 9, 9, 18, 55, 57, 343, DateTimeKind.Local).AddTicks(7877),
                            Status = 2
                        });
                });

            modelBuilder.Entity("ApplicationManagementService.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Candidates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john.doe@example.com",
                            FullName = "John Doe",
                            PhoneNumber = "123-456-7890"
                        },
                        new
                        {
                            Id = 2,
                            Email = "jane.smith@example.com",
                            FullName = "Jane Smith",
                            PhoneNumber = "234-567-8901"
                        },
                        new
                        {
                            Id = 3,
                            Email = "robert.brown@example.com",
                            FullName = "Robert Brown",
                            PhoneNumber = "345-678-9012"
                        });
                });

            modelBuilder.Entity("ApplicationManagementService.Entities.Application", b =>
                {
                    b.HasOne("ApplicationManagementService.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });
#pragma warning restore 612, 618
        }
    }
}
