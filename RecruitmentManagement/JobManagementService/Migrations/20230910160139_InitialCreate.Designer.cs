// <auto-generated />
using System;
using JobManagementService.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JobManagementService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230910160139_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationManagementService.Entities.JobOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("JobOffers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Develop cutting-edge applications",
                            LocationId = 1,
                            PostedDate = new DateTime(2023, 9, 10, 16, 1, 39, 548, DateTimeKind.Utc).AddTicks(6685),
                            Salary = 60000m,
                            Title = "Software Developer",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Description = "Manage and maintain IT infrastructure",
                            LocationId = 2,
                            PostedDate = new DateTime(2023, 9, 10, 16, 1, 39, 548, DateTimeKind.Utc).AddTicks(6687),
                            Salary = 50000m,
                            Title = "System Administrator",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Description = "Manage and maintain database systems",
                            LocationId = 3,
                            PostedDate = new DateTime(2023, 9, 10, 16, 1, 39, 548, DateTimeKind.Utc).AddTicks(6688),
                            Salary = 55000m,
                            Title = "Database Administrator",
                            Type = 0
                        });
                });

            modelBuilder.Entity("ApplicationManagementService.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "New York",
                            Country = "USA",
                            State = "NY"
                        },
                        new
                        {
                            Id = 2,
                            City = "London",
                            Country = "UK",
                            State = "LDN"
                        },
                        new
                        {
                            Id = 3,
                            City = "Paris",
                            Country = "France",
                            State = "IDF"
                        });
                });

            modelBuilder.Entity("ApplicationManagementService.Entities.JobOffer", b =>
                {
                    b.HasOne("ApplicationManagementService.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });
#pragma warning restore 612, 618
        }
    }
}
